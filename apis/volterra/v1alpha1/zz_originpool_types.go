/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdvancedOptionsHeaderTransformationTypeObservation struct {
}

type AdvancedOptionsHeaderTransformationTypeParameters struct {

	// +kubebuilder:validation:Optional
	DefaultHeaderTransformation *bool `json:"defaultHeaderTransformation,omitempty" tf:"default_header_transformation,omitempty"`

	// +kubebuilder:validation:Optional
	ProperCaseHeaderTransformation *bool `json:"properCaseHeaderTransformation,omitempty" tf:"proper_case_header_transformation,omitempty"`
}

type CircuitBreakerObservation struct {
}

type CircuitBreakerParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionLimit *float64 `json:"connectionLimit,omitempty" tf:"connection_limit,omitempty"`

	// +kubebuilder:validation:Optional
	MaxRequests *float64 `json:"maxRequests,omitempty" tf:"max_requests,omitempty"`

	// +kubebuilder:validation:Optional
	PendingRequests *float64 `json:"pendingRequests,omitempty" tf:"pending_requests,omitempty"`

	// +kubebuilder:validation:Optional
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Optional
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`
}

type ConsulServiceObservation struct {

	// +kubebuilder:validation:Optional
	SiteLocator []SiteLocatorObservation `json:"siteLocator,omitempty" tf:"site_locator,omitempty"`
}

type ConsulServiceParameters struct {

	// +kubebuilder:validation:Optional
	InsideNetwork *bool `json:"insideNetwork,omitempty" tf:"inside_network,omitempty"`

	// +kubebuilder:validation:Optional
	OutsideNetwork *bool `json:"outsideNetwork,omitempty" tf:"outside_network,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// +kubebuilder:validation:Optional
	SiteLocator []SiteLocatorParameters `json:"siteLocator,omitempty" tf:"site_locator,omitempty"`
}

type CustomEndpointObjectObservation struct {
}

type CustomEndpointObjectParameters struct {

	// +kubebuilder:validation:Optional
	Endpoint []EndpointParameters `json:"endpoint,omitempty" tf:"endpoint,omitempty"`
}

type DefaultSubsetObservation struct {
}

type DefaultSubsetParameters struct {

	// +kubebuilder:validation:Optional
	DefaultSubset map[string]*string `json:"defaultSubset,omitempty" tf:"default_subset,omitempty"`
}

type EnableSubsetsObservation struct {
}

type EnableSubsetsParameters struct {

	// +kubebuilder:validation:Optional
	AnyEndpoint *bool `json:"anyEndpoint,omitempty" tf:"any_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultSubset []DefaultSubsetParameters `json:"defaultSubset,omitempty" tf:"default_subset,omitempty"`

	// +kubebuilder:validation:Optional
	EndpointSubsets []EndpointSubsetsParameters `json:"endpointSubsets,omitempty" tf:"endpoint_subsets,omitempty"`

	// +kubebuilder:validation:Optional
	FailRequest *bool `json:"failRequest,omitempty" tf:"fail_request,omitempty"`
}

type EndpointObservation struct {
}

type EndpointParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type EndpointSubsetsObservation struct {
}

type EndpointSubsetsParameters struct {

	// +kubebuilder:validation:Optional
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`
}

type HealthcheckObservation struct {
}

type HealthcheckParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type Http2OptionsObservation struct {
}

type Http2OptionsParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type K8SServiceObservation struct {

	// +kubebuilder:validation:Optional
	SiteLocator []K8SServiceSiteLocatorObservation `json:"siteLocator,omitempty" tf:"site_locator,omitempty"`
}

type K8SServiceParameters struct {

	// +kubebuilder:validation:Optional
	InsideNetwork *bool `json:"insideNetwork,omitempty" tf:"inside_network,omitempty"`

	// +kubebuilder:validation:Optional
	OutsideNetwork *bool `json:"outsideNetwork,omitempty" tf:"outside_network,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceSelector []ServiceSelectorParameters `json:"serviceSelector,omitempty" tf:"service_selector,omitempty"`

	// +kubebuilder:validation:Optional
	SiteLocator []K8SServiceSiteLocatorParameters `json:"siteLocator,omitempty" tf:"site_locator,omitempty"`

	// +kubebuilder:validation:Optional
	Vk8SNetworks *bool `json:"vk8sNetworks,omitempty" tf:"vk8s_networks,omitempty"`
}

type K8SServiceSiteLocatorObservation struct {

	// +kubebuilder:validation:Optional
	Site []K8SServiceSiteLocatorSiteObservation `json:"site,omitempty" tf:"site,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualSite []K8SServiceSiteLocatorVirtualSiteObservation `json:"virtualSite,omitempty" tf:"virtual_site,omitempty"`
}

type K8SServiceSiteLocatorParameters struct {

	// +kubebuilder:validation:Optional
	Site []K8SServiceSiteLocatorSiteParameters `json:"site,omitempty" tf:"site,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualSite []K8SServiceSiteLocatorVirtualSiteParameters `json:"virtualSite,omitempty" tf:"virtual_site,omitempty"`
}

type K8SServiceSiteLocatorSiteObservation struct {
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type K8SServiceSiteLocatorSiteParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type K8SServiceSiteLocatorVirtualSiteObservation struct {
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type K8SServiceSiteLocatorVirtualSiteParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type OriginPoolAdvancedOptionsObservation struct {
}

type OriginPoolAdvancedOptionsParameters struct {

	// +kubebuilder:validation:Optional
	CircuitBreaker []CircuitBreakerParameters `json:"circuitBreaker,omitempty" tf:"circuit_breaker,omitempty"`

	// +kubebuilder:validation:Optional
	ConnectionTimeout *float64 `json:"connectionTimeout,omitempty" tf:"connection_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultCircuitBreaker *bool `json:"defaultCircuitBreaker,omitempty" tf:"default_circuit_breaker,omitempty"`

	// +kubebuilder:validation:Optional
	DisableCircuitBreaker *bool `json:"disableCircuitBreaker,omitempty" tf:"disable_circuit_breaker,omitempty"`

	// +kubebuilder:validation:Optional
	DisableOutlierDetection *bool `json:"disableOutlierDetection,omitempty" tf:"disable_outlier_detection,omitempty"`

	// +kubebuilder:validation:Optional
	DisableSubsets *bool `json:"disableSubsets,omitempty" tf:"disable_subsets,omitempty"`

	// +kubebuilder:validation:Optional
	EnableSubsets []EnableSubsetsParameters `json:"enableSubsets,omitempty" tf:"enable_subsets,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPIdleTimeout *float64 `json:"httpIdleTimeout,omitempty" tf:"http_idle_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	HeaderTransformationType []AdvancedOptionsHeaderTransformationTypeParameters `json:"headerTransformationType,omitempty" tf:"header_transformation_type,omitempty"`

	// +kubebuilder:validation:Optional
	Http2Options []Http2OptionsParameters `json:"http2Options,omitempty" tf:"http2_options,omitempty"`

	// +kubebuilder:validation:Optional
	NoPanicThreshold *bool `json:"noPanicThreshold,omitempty" tf:"no_panic_threshold,omitempty"`

	// +kubebuilder:validation:Optional
	OutlierDetection []OutlierDetectionParameters `json:"outlierDetection,omitempty" tf:"outlier_detection,omitempty"`

	// +kubebuilder:validation:Optional
	PanicThreshold *float64 `json:"panicThreshold,omitempty" tf:"panic_threshold,omitempty"`
}

type OriginPoolObservation_2 struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	OriginServers []OriginServersObservation `json:"originServers,omitempty" tf:"origin_servers,omitempty"`
}

type OriginPoolParameters_2 struct {

	// +kubebuilder:validation:Optional
	AdvancedOptions []OriginPoolAdvancedOptionsParameters `json:"advancedOptions,omitempty" tf:"advanced_options,omitempty"`

	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Optional
	AutomaticPort *bool `json:"automaticPort,omitempty" tf:"automatic_port,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// +kubebuilder:validation:Required
	EndpointSelection *string `json:"endpointSelection" tf:"endpoint_selection,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckPort *float64 `json:"healthCheckPort,omitempty" tf:"health_check_port,omitempty"`

	// +kubebuilder:validation:Optional
	Healthcheck []HealthcheckParameters `json:"healthcheck,omitempty" tf:"healthcheck,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	LoadbalancerAlgorithm *string `json:"loadbalancerAlgorithm" tf:"loadbalancer_algorithm,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/clhain/provider-volterra/apis/volterra/v1alpha1.VolterraNamespace
	// +crossplane:generate:reference:extractor=github.com/clhain/provider-volterra/config/common.ExtractResourceName()
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Reference to a VolterraNamespace in volterra to populate namespace.
	// +kubebuilder:validation:Optional
	NamespaceRef *v1.Reference `json:"namespaceRef,omitempty" tf:"-"`

	// Selector for a VolterraNamespace in volterra to populate namespace.
	// +kubebuilder:validation:Optional
	NamespaceSelector *v1.Selector `json:"namespaceSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	NoTLS *bool `json:"noTls,omitempty" tf:"no_tls,omitempty"`

	// +kubebuilder:validation:Optional
	OriginServers []OriginServersParameters `json:"originServers,omitempty" tf:"origin_servers,omitempty"`

	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	SameAsEndpointPort *bool `json:"sameAsEndpointPort,omitempty" tf:"same_as_endpoint_port,omitempty"`

	// +kubebuilder:validation:Optional
	UseTLS []UseTLSParameters `json:"useTls,omitempty" tf:"use_tls,omitempty"`
}

type OriginServersObservation struct {

	// +kubebuilder:validation:Optional
	ConsulService []ConsulServiceObservation `json:"consulService,omitempty" tf:"consul_service,omitempty"`

	// +kubebuilder:validation:Optional
	K8SService []K8SServiceObservation `json:"k8sService,omitempty" tf:"k8s_service,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIP []PrivateIPObservation `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateName []PrivateNameObservation `json:"privateName,omitempty" tf:"private_name,omitempty"`
}

type OriginServersParameters struct {

	// +kubebuilder:validation:Optional
	ConsulService []ConsulServiceParameters `json:"consulService,omitempty" tf:"consul_service,omitempty"`

	// +kubebuilder:validation:Optional
	CustomEndpointObject []CustomEndpointObjectParameters `json:"customEndpointObject,omitempty" tf:"custom_endpoint_object,omitempty"`

	// +kubebuilder:validation:Optional
	K8SService []K8SServiceParameters `json:"k8sService,omitempty" tf:"k8s_service,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIP []PrivateIPParameters `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateName []PrivateNameParameters `json:"privateName,omitempty" tf:"private_name,omitempty"`

	// +kubebuilder:validation:Optional
	PublicIP []OriginServersPublicIPParameters `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// +kubebuilder:validation:Optional
	PublicName []PublicNameParameters `json:"publicName,omitempty" tf:"public_name,omitempty"`

	// +kubebuilder:validation:Optional
	VnPrivateIP []VnPrivateIPParameters `json:"vnPrivateIp,omitempty" tf:"vn_private_ip,omitempty"`

	// +kubebuilder:validation:Optional
	VnPrivateName []VnPrivateNameParameters `json:"vnPrivateName,omitempty" tf:"vn_private_name,omitempty"`
}

type OriginServersPublicIPObservation struct {
}

type OriginServersPublicIPParameters struct {

	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`
}

type OutlierDetectionObservation struct {
}

type OutlierDetectionParameters struct {

	// +kubebuilder:validation:Optional
	BaseEjectionTime *float64 `json:"baseEjectionTime,omitempty" tf:"base_ejection_time,omitempty"`

	// +kubebuilder:validation:Optional
	Consecutive5Xx *float64 `json:"consecutive5Xx,omitempty" tf:"consecutive_5xx,omitempty"`

	// +kubebuilder:validation:Optional
	ConsecutiveGatewayFailure *float64 `json:"consecutiveGatewayFailure,omitempty" tf:"consecutive_gateway_failure,omitempty"`

	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// +kubebuilder:validation:Optional
	MaxEjectionPercent *float64 `json:"maxEjectionPercent,omitempty" tf:"max_ejection_percent,omitempty"`
}

type PrivateIPObservation struct {

	// +kubebuilder:validation:Optional
	SiteLocator []PrivateIPSiteLocatorObservation `json:"siteLocator,omitempty" tf:"site_locator,omitempty"`
}

type PrivateIPParameters struct {

	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	InsideNetwork *bool `json:"insideNetwork,omitempty" tf:"inside_network,omitempty"`

	// +kubebuilder:validation:Optional
	OutsideNetwork *bool `json:"outsideNetwork,omitempty" tf:"outside_network,omitempty"`

	// +kubebuilder:validation:Optional
	SiteLocator []PrivateIPSiteLocatorParameters `json:"siteLocator,omitempty" tf:"site_locator,omitempty"`
}

type PrivateIPSiteLocatorObservation struct {

	// +kubebuilder:validation:Optional
	Site []PrivateIPSiteLocatorSiteObservation `json:"site,omitempty" tf:"site,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualSite []PrivateIPSiteLocatorVirtualSiteObservation `json:"virtualSite,omitempty" tf:"virtual_site,omitempty"`
}

type PrivateIPSiteLocatorParameters struct {

	// +kubebuilder:validation:Optional
	Site []PrivateIPSiteLocatorSiteParameters `json:"site,omitempty" tf:"site,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualSite []PrivateIPSiteLocatorVirtualSiteParameters `json:"virtualSite,omitempty" tf:"virtual_site,omitempty"`
}

type PrivateIPSiteLocatorSiteObservation struct {
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type PrivateIPSiteLocatorSiteParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type PrivateIPSiteLocatorVirtualSiteObservation struct {
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type PrivateIPSiteLocatorVirtualSiteParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type PrivateNameObservation struct {

	// +kubebuilder:validation:Optional
	SiteLocator []PrivateNameSiteLocatorObservation `json:"siteLocator,omitempty" tf:"site_locator,omitempty"`
}

type PrivateNameParameters struct {

	// +kubebuilder:validation:Optional
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// +kubebuilder:validation:Optional
	InsideNetwork *bool `json:"insideNetwork,omitempty" tf:"inside_network,omitempty"`

	// +kubebuilder:validation:Optional
	OutsideNetwork *bool `json:"outsideNetwork,omitempty" tf:"outside_network,omitempty"`

	// +kubebuilder:validation:Optional
	SiteLocator []PrivateNameSiteLocatorParameters `json:"siteLocator,omitempty" tf:"site_locator,omitempty"`
}

type PrivateNameSiteLocatorObservation struct {

	// +kubebuilder:validation:Optional
	Site []PrivateNameSiteLocatorSiteObservation `json:"site,omitempty" tf:"site,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualSite []PrivateNameSiteLocatorVirtualSiteObservation `json:"virtualSite,omitempty" tf:"virtual_site,omitempty"`
}

type PrivateNameSiteLocatorParameters struct {

	// +kubebuilder:validation:Optional
	Site []PrivateNameSiteLocatorSiteParameters `json:"site,omitempty" tf:"site,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualSite []PrivateNameSiteLocatorVirtualSiteParameters `json:"virtualSite,omitempty" tf:"virtual_site,omitempty"`
}

type PrivateNameSiteLocatorSiteObservation struct {
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type PrivateNameSiteLocatorSiteParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type PrivateNameSiteLocatorVirtualSiteObservation struct {
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type PrivateNameSiteLocatorVirtualSiteParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type PrivateNetworkObservation struct {
}

type PrivateNetworkParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type PublicNameObservation struct {
}

type PublicNameParameters struct {

	// +kubebuilder:validation:Optional
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`
}

type ServiceSelectorObservation struct {
}

type ServiceSelectorParameters struct {

	// +kubebuilder:validation:Required
	Expressions []*string `json:"expressions" tf:"expressions,omitempty"`
}

type SiteLocatorObservation struct {

	// +kubebuilder:validation:Optional
	Site []SiteLocatorSiteObservation `json:"site,omitempty" tf:"site,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualSite []SiteLocatorVirtualSiteObservation `json:"virtualSite,omitempty" tf:"virtual_site,omitempty"`
}

type SiteLocatorParameters struct {

	// +kubebuilder:validation:Optional
	Site []SiteLocatorSiteParameters `json:"site,omitempty" tf:"site,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualSite []SiteLocatorVirtualSiteParameters `json:"virtualSite,omitempty" tf:"virtual_site,omitempty"`
}

type SiteLocatorSiteObservation struct {
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type SiteLocatorSiteParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type SiteLocatorVirtualSiteObservation struct {
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type SiteLocatorVirtualSiteParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type UseMtlsTLSCertificatesCustomHashAlgorithmsObservation struct {
}

type UseMtlsTLSCertificatesCustomHashAlgorithmsParameters struct {

	// +kubebuilder:validation:Required
	HashAlgorithms []*string `json:"hashAlgorithms" tf:"hash_algorithms,omitempty"`
}

type UseMtlsTLSCertificatesDisableOcspStaplingObservation struct {
}

type UseMtlsTLSCertificatesDisableOcspStaplingParameters struct {
}

type UseMtlsTLSCertificatesObservation struct {
}

type UseMtlsTLSCertificatesParameters struct {

	// +kubebuilder:validation:Optional
	CertificateURL *string `json:"certificateUrl,omitempty" tf:"certificate_url,omitempty"`

	// +kubebuilder:validation:Optional
	CustomHashAlgorithms []UseMtlsTLSCertificatesCustomHashAlgorithmsParameters `json:"customHashAlgorithms,omitempty" tf:"custom_hash_algorithms,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DisableOcspStapling []UseMtlsTLSCertificatesDisableOcspStaplingParameters `json:"disableOcspStapling,omitempty" tf:"disable_ocsp_stapling,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateKey []UseMtlsTLSCertificatesPrivateKeyParameters `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// +kubebuilder:validation:Optional
	UseSystemDefaults []UseMtlsTLSCertificatesUseSystemDefaultsParameters `json:"useSystemDefaults,omitempty" tf:"use_system_defaults,omitempty"`
}

type UseMtlsTLSCertificatesPrivateKeyBlindfoldSecretInfoInternalObservation struct {
}

type UseMtlsTLSCertificatesPrivateKeyBlindfoldSecretInfoInternalParameters struct {

	// +kubebuilder:validation:Optional
	DecryptionProvider *string `json:"decryptionProvider,omitempty" tf:"decryption_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	StoreProvider *string `json:"storeProvider,omitempty" tf:"store_provider,omitempty"`
}

type UseMtlsTLSCertificatesPrivateKeyBlindfoldSecretInfoObservation struct {
}

type UseMtlsTLSCertificatesPrivateKeyBlindfoldSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	DecryptionProvider *string `json:"decryptionProvider,omitempty" tf:"decryption_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	StoreProvider *string `json:"storeProvider,omitempty" tf:"store_provider,omitempty"`
}

type UseMtlsTLSCertificatesPrivateKeyClearSecretInfoObservation struct {
}

type UseMtlsTLSCertificatesPrivateKeyClearSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type UseMtlsTLSCertificatesPrivateKeyObservation struct {
}

type UseMtlsTLSCertificatesPrivateKeyParameters struct {

	// +kubebuilder:validation:Optional
	BlindfoldSecretInfo []UseMtlsTLSCertificatesPrivateKeyBlindfoldSecretInfoParameters `json:"blindfoldSecretInfo,omitempty" tf:"blindfold_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	BlindfoldSecretInfoInternal []UseMtlsTLSCertificatesPrivateKeyBlindfoldSecretInfoInternalParameters `json:"blindfoldSecretInfoInternal,omitempty" tf:"blindfold_secret_info_internal,omitempty"`

	// +kubebuilder:validation:Optional
	ClearSecretInfo []UseMtlsTLSCertificatesPrivateKeyClearSecretInfoParameters `json:"clearSecretInfo,omitempty" tf:"clear_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	SecretEncodingType *string `json:"secretEncodingType,omitempty" tf:"secret_encoding_type,omitempty"`

	// +kubebuilder:validation:Optional
	VaultSecretInfo []UseMtlsTLSCertificatesPrivateKeyVaultSecretInfoParameters `json:"vaultSecretInfo,omitempty" tf:"vault_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	WingmanSecretInfo []UseMtlsTLSCertificatesPrivateKeyWingmanSecretInfoParameters `json:"wingmanSecretInfo,omitempty" tf:"wingman_secret_info,omitempty"`
}

type UseMtlsTLSCertificatesPrivateKeyVaultSecretInfoObservation struct {
}

type UseMtlsTLSCertificatesPrivateKeyVaultSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// +kubebuilder:validation:Optional
	SecretEncoding *string `json:"secretEncoding,omitempty" tf:"secret_encoding,omitempty"`

	// +kubebuilder:validation:Optional
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type UseMtlsTLSCertificatesPrivateKeyWingmanSecretInfoObservation struct {
}

type UseMtlsTLSCertificatesPrivateKeyWingmanSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type UseMtlsTLSCertificatesUseSystemDefaultsObservation struct {
}

type UseMtlsTLSCertificatesUseSystemDefaultsParameters struct {
}

type UseServerVerificationObservation struct {
}

type UseServerVerificationParameters struct {

	// +kubebuilder:validation:Optional
	TrustedCAURL *string `json:"trustedCaUrl,omitempty" tf:"trusted_ca_url,omitempty"`
}

type UseTLSObservation struct {
}

type UseTLSParameters struct {

	// +kubebuilder:validation:Optional
	DisableSni *bool `json:"disableSni,omitempty" tf:"disable_sni,omitempty"`

	// +kubebuilder:validation:Optional
	NoMtls *bool `json:"noMtls,omitempty" tf:"no_mtls,omitempty"`

	// +kubebuilder:validation:Optional
	SkipServerVerification *bool `json:"skipServerVerification,omitempty" tf:"skip_server_verification,omitempty"`

	// +kubebuilder:validation:Optional
	Sni *string `json:"sni,omitempty" tf:"sni,omitempty"`

	// +kubebuilder:validation:Optional
	TLSConfig []UseTLSTLSConfigParameters `json:"tlsConfig,omitempty" tf:"tls_config,omitempty"`

	// +kubebuilder:validation:Optional
	UseHostHeaderAsSni *bool `json:"useHostHeaderAsSni,omitempty" tf:"use_host_header_as_sni,omitempty"`

	// +kubebuilder:validation:Optional
	UseMtls []UseTLSUseMtlsParameters `json:"useMtls,omitempty" tf:"use_mtls,omitempty"`

	// +kubebuilder:validation:Optional
	UseServerVerification []UseServerVerificationParameters `json:"useServerVerification,omitempty" tf:"use_server_verification,omitempty"`

	// +kubebuilder:validation:Optional
	VolterraTrustedCA *bool `json:"volterraTrustedCa,omitempty" tf:"volterra_trusted_ca,omitempty"`
}

type UseTLSTLSConfigCustomSecurityObservation struct {
}

type UseTLSTLSConfigCustomSecurityParameters struct {

	// +kubebuilder:validation:Required
	CipherSuites []*string `json:"cipherSuites" tf:"cipher_suites,omitempty"`

	// +kubebuilder:validation:Optional
	MaxVersion *string `json:"maxVersion,omitempty" tf:"max_version,omitempty"`

	// +kubebuilder:validation:Optional
	MinVersion *string `json:"minVersion,omitempty" tf:"min_version,omitempty"`
}

type UseTLSTLSConfigObservation struct {
}

type UseTLSTLSConfigParameters struct {

	// +kubebuilder:validation:Optional
	CustomSecurity []UseTLSTLSConfigCustomSecurityParameters `json:"customSecurity,omitempty" tf:"custom_security,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultSecurity *bool `json:"defaultSecurity,omitempty" tf:"default_security,omitempty"`

	// +kubebuilder:validation:Optional
	LowSecurity *bool `json:"lowSecurity,omitempty" tf:"low_security,omitempty"`

	// +kubebuilder:validation:Optional
	MediumSecurity *bool `json:"mediumSecurity,omitempty" tf:"medium_security,omitempty"`
}

type UseTLSUseMtlsObservation struct {
}

type UseTLSUseMtlsParameters struct {

	// +kubebuilder:validation:Optional
	TLSCertificates []UseMtlsTLSCertificatesParameters `json:"tlsCertificates,omitempty" tf:"tls_certificates,omitempty"`
}

type VnPrivateIPObservation struct {
}

type VnPrivateIPParameters struct {

	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualNetwork []VnPrivateIPVirtualNetworkParameters `json:"virtualNetwork,omitempty" tf:"virtual_network,omitempty"`
}

type VnPrivateIPVirtualNetworkObservation struct {
}

type VnPrivateIPVirtualNetworkParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type VnPrivateNameObservation struct {
}

type VnPrivateNameParameters struct {

	// +kubebuilder:validation:Optional
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateNetwork []PrivateNetworkParameters `json:"privateNetwork,omitempty" tf:"private_network,omitempty"`
}

// OriginPoolSpec defines the desired state of OriginPool
type OriginPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OriginPoolParameters_2 `json:"forProvider"`
}

// OriginPoolStatus defines the observed state of OriginPool.
type OriginPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OriginPoolObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OriginPool is the Schema for the OriginPools API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,volterra}
type OriginPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OriginPoolSpec   `json:"spec"`
	Status            OriginPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OriginPoolList contains a list of OriginPools
type OriginPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OriginPool `json:"items"`
}

// Repository type metadata.
var (
	OriginPool_Kind             = "OriginPool"
	OriginPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OriginPool_Kind}.String()
	OriginPool_KindAPIVersion   = OriginPool_Kind + "." + CRDGroupVersion.String()
	OriginPool_GroupVersionKind = CRDGroupVersion.WithKind(OriginPool_Kind)
)

func init() {
	SchemeBuilder.Register(&OriginPool{}, &OriginPoolList{})
}
