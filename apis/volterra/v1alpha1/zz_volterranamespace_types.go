/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VolterraNamespaceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TenantName *string `json:"tenantName,omitempty" tf:"tenant_name,omitempty"`

	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type VolterraNamespaceParameters struct {

	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// VolterraNamespaceSpec defines the desired state of VolterraNamespace
type VolterraNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolterraNamespaceParameters `json:"forProvider"`
}

// VolterraNamespaceStatus defines the observed state of VolterraNamespace.
type VolterraNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolterraNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolterraNamespace is the Schema for the VolterraNamespaces API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,volterra}
type VolterraNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolterraNamespaceSpec   `json:"spec"`
	Status            VolterraNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolterraNamespaceList contains a list of VolterraNamespaces
type VolterraNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolterraNamespace `json:"items"`
}

// Repository type metadata.
var (
	VolterraNamespace_Kind             = "VolterraNamespace"
	VolterraNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolterraNamespace_Kind}.String()
	VolterraNamespace_KindAPIVersion   = VolterraNamespace_Kind + "." + CRDGroupVersion.String()
	VolterraNamespace_GroupVersionKind = CRDGroupVersion.WithKind(VolterraNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&VolterraNamespace{}, &VolterraNamespaceList{})
}
