/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsSecretKeyObservation struct {
}

type AwsSecretKeyParameters struct {

	// +kubebuilder:validation:Optional
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// +kubebuilder:validation:Optional
	SecretKey []SecretKeyParameters `json:"secretKey,omitempty" tf:"secret_key,omitempty"`
}

type AzureClientSecretObservation struct {
}

type AzureClientSecretParameters struct {

	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClientSecret []ClientSecretParameters `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type AzurePfxCertificateObservation struct {
}

type AzurePfxCertificateParameters struct {

	// +kubebuilder:validation:Optional
	CertificateURL *string `json:"certificateUrl,omitempty" tf:"certificate_url,omitempty"`

	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Optional
	Password []PasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type BlindfoldSecretInfoInternalObservation struct {
}

type BlindfoldSecretInfoInternalParameters struct {

	// +kubebuilder:validation:Optional
	DecryptionProvider *string `json:"decryptionProvider,omitempty" tf:"decryption_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	StoreProvider *string `json:"storeProvider,omitempty" tf:"store_provider,omitempty"`
}

type BlindfoldSecretInfoObservation struct {
}

type BlindfoldSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	DecryptionProvider *string `json:"decryptionProvider,omitempty" tf:"decryption_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	StoreProvider *string `json:"storeProvider,omitempty" tf:"store_provider,omitempty"`
}

type ClearSecretInfoObservation struct {
}

type ClearSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ClientSecretBlindfoldSecretInfoInternalObservation struct {
}

type ClientSecretBlindfoldSecretInfoInternalParameters struct {

	// +kubebuilder:validation:Optional
	DecryptionProvider *string `json:"decryptionProvider,omitempty" tf:"decryption_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	StoreProvider *string `json:"storeProvider,omitempty" tf:"store_provider,omitempty"`
}

type ClientSecretBlindfoldSecretInfoObservation struct {
}

type ClientSecretBlindfoldSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	DecryptionProvider *string `json:"decryptionProvider,omitempty" tf:"decryption_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	StoreProvider *string `json:"storeProvider,omitempty" tf:"store_provider,omitempty"`
}

type ClientSecretClearSecretInfoObservation struct {
}

type ClientSecretClearSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ClientSecretObservation struct {
}

type ClientSecretParameters struct {

	// +kubebuilder:validation:Optional
	BlindfoldSecretInfo []ClientSecretBlindfoldSecretInfoParameters `json:"blindfoldSecretInfo,omitempty" tf:"blindfold_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	BlindfoldSecretInfoInternal []ClientSecretBlindfoldSecretInfoInternalParameters `json:"blindfoldSecretInfoInternal,omitempty" tf:"blindfold_secret_info_internal,omitempty"`

	// +kubebuilder:validation:Optional
	ClearSecretInfo []ClientSecretClearSecretInfoParameters `json:"clearSecretInfo,omitempty" tf:"clear_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	SecretEncodingType *string `json:"secretEncodingType,omitempty" tf:"secret_encoding_type,omitempty"`

	// +kubebuilder:validation:Optional
	VaultSecretInfo []ClientSecretVaultSecretInfoParameters `json:"vaultSecretInfo,omitempty" tf:"vault_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	WingmanSecretInfo []ClientSecretWingmanSecretInfoParameters `json:"wingmanSecretInfo,omitempty" tf:"wingman_secret_info,omitempty"`
}

type ClientSecretVaultSecretInfoObservation struct {
}

type ClientSecretVaultSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// +kubebuilder:validation:Optional
	SecretEncoding *string `json:"secretEncoding,omitempty" tf:"secret_encoding,omitempty"`

	// +kubebuilder:validation:Optional
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type ClientSecretWingmanSecretInfoObservation struct {
}

type ClientSecretWingmanSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CloudCredentialsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CloudCredentialsParameters struct {

	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Optional
	AwsSecretKey []AwsSecretKeyParameters `json:"awsSecretKey,omitempty" tf:"aws_secret_key,omitempty"`

	// +kubebuilder:validation:Optional
	AzureClientSecret []AzureClientSecretParameters `json:"azureClientSecret,omitempty" tf:"azure_client_secret,omitempty"`

	// +kubebuilder:validation:Optional
	AzurePfxCertificate []AzurePfxCertificateParameters `json:"azurePfxCertificate,omitempty" tf:"azure_pfx_certificate,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// +kubebuilder:validation:Optional
	GCPCredFile []GCPCredFileParameters `json:"gcpCredFile,omitempty" tf:"gcp_cred_file,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

type CredentialFileBlindfoldSecretInfoInternalObservation struct {
}

type CredentialFileBlindfoldSecretInfoInternalParameters struct {

	// +kubebuilder:validation:Optional
	DecryptionProvider *string `json:"decryptionProvider,omitempty" tf:"decryption_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	StoreProvider *string `json:"storeProvider,omitempty" tf:"store_provider,omitempty"`
}

type CredentialFileBlindfoldSecretInfoObservation struct {
}

type CredentialFileBlindfoldSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	DecryptionProvider *string `json:"decryptionProvider,omitempty" tf:"decryption_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	StoreProvider *string `json:"storeProvider,omitempty" tf:"store_provider,omitempty"`
}

type CredentialFileClearSecretInfoObservation struct {
}

type CredentialFileClearSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type CredentialFileObservation struct {
}

type CredentialFileParameters struct {

	// +kubebuilder:validation:Optional
	BlindfoldSecretInfo []CredentialFileBlindfoldSecretInfoParameters `json:"blindfoldSecretInfo,omitempty" tf:"blindfold_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	BlindfoldSecretInfoInternal []CredentialFileBlindfoldSecretInfoInternalParameters `json:"blindfoldSecretInfoInternal,omitempty" tf:"blindfold_secret_info_internal,omitempty"`

	// +kubebuilder:validation:Optional
	ClearSecretInfo []CredentialFileClearSecretInfoParameters `json:"clearSecretInfo,omitempty" tf:"clear_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	SecretEncodingType *string `json:"secretEncodingType,omitempty" tf:"secret_encoding_type,omitempty"`

	// +kubebuilder:validation:Optional
	VaultSecretInfo []CredentialFileVaultSecretInfoParameters `json:"vaultSecretInfo,omitempty" tf:"vault_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	WingmanSecretInfo []CredentialFileWingmanSecretInfoParameters `json:"wingmanSecretInfo,omitempty" tf:"wingman_secret_info,omitempty"`
}

type CredentialFileVaultSecretInfoObservation struct {
}

type CredentialFileVaultSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// +kubebuilder:validation:Optional
	SecretEncoding *string `json:"secretEncoding,omitempty" tf:"secret_encoding,omitempty"`

	// +kubebuilder:validation:Optional
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type CredentialFileWingmanSecretInfoObservation struct {
}

type CredentialFileWingmanSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type GCPCredFileObservation struct {
}

type GCPCredFileParameters struct {

	// +kubebuilder:validation:Optional
	CredentialFile []CredentialFileParameters `json:"credentialFile,omitempty" tf:"credential_file,omitempty"`
}

type PasswordBlindfoldSecretInfoInternalObservation struct {
}

type PasswordBlindfoldSecretInfoInternalParameters struct {

	// +kubebuilder:validation:Optional
	DecryptionProvider *string `json:"decryptionProvider,omitempty" tf:"decryption_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	StoreProvider *string `json:"storeProvider,omitempty" tf:"store_provider,omitempty"`
}

type PasswordBlindfoldSecretInfoObservation struct {
}

type PasswordBlindfoldSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	DecryptionProvider *string `json:"decryptionProvider,omitempty" tf:"decryption_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	StoreProvider *string `json:"storeProvider,omitempty" tf:"store_provider,omitempty"`
}

type PasswordClearSecretInfoObservation struct {
}

type PasswordClearSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type PasswordObservation struct {
}

type PasswordParameters struct {

	// +kubebuilder:validation:Optional
	BlindfoldSecretInfo []PasswordBlindfoldSecretInfoParameters `json:"blindfoldSecretInfo,omitempty" tf:"blindfold_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	BlindfoldSecretInfoInternal []PasswordBlindfoldSecretInfoInternalParameters `json:"blindfoldSecretInfoInternal,omitempty" tf:"blindfold_secret_info_internal,omitempty"`

	// +kubebuilder:validation:Optional
	ClearSecretInfo []PasswordClearSecretInfoParameters `json:"clearSecretInfo,omitempty" tf:"clear_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	SecretEncodingType *string `json:"secretEncodingType,omitempty" tf:"secret_encoding_type,omitempty"`

	// +kubebuilder:validation:Optional
	VaultSecretInfo []PasswordVaultSecretInfoParameters `json:"vaultSecretInfo,omitempty" tf:"vault_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	WingmanSecretInfo []PasswordWingmanSecretInfoParameters `json:"wingmanSecretInfo,omitempty" tf:"wingman_secret_info,omitempty"`
}

type PasswordVaultSecretInfoObservation struct {
}

type PasswordVaultSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// +kubebuilder:validation:Optional
	SecretEncoding *string `json:"secretEncoding,omitempty" tf:"secret_encoding,omitempty"`

	// +kubebuilder:validation:Optional
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type PasswordWingmanSecretInfoObservation struct {
}

type PasswordWingmanSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SecretKeyObservation struct {
}

type SecretKeyParameters struct {

	// +kubebuilder:validation:Optional
	BlindfoldSecretInfo []BlindfoldSecretInfoParameters `json:"blindfoldSecretInfo,omitempty" tf:"blindfold_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	BlindfoldSecretInfoInternal []BlindfoldSecretInfoInternalParameters `json:"blindfoldSecretInfoInternal,omitempty" tf:"blindfold_secret_info_internal,omitempty"`

	// +kubebuilder:validation:Optional
	ClearSecretInfo []ClearSecretInfoParameters `json:"clearSecretInfo,omitempty" tf:"clear_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	SecretEncodingType *string `json:"secretEncodingType,omitempty" tf:"secret_encoding_type,omitempty"`

	// +kubebuilder:validation:Optional
	VaultSecretInfo []VaultSecretInfoParameters `json:"vaultSecretInfo,omitempty" tf:"vault_secret_info,omitempty"`

	// +kubebuilder:validation:Optional
	WingmanSecretInfo []WingmanSecretInfoParameters `json:"wingmanSecretInfo,omitempty" tf:"wingman_secret_info,omitempty"`
}

type VaultSecretInfoObservation struct {
}

type VaultSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// +kubebuilder:validation:Optional
	SecretEncoding *string `json:"secretEncoding,omitempty" tf:"secret_encoding,omitempty"`

	// +kubebuilder:validation:Optional
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type WingmanSecretInfoObservation struct {
}

type WingmanSecretInfoParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// CloudCredentialsSpec defines the desired state of CloudCredentials
type CloudCredentialsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CloudCredentialsParameters `json:"forProvider"`
}

// CloudCredentialsStatus defines the observed state of CloudCredentials.
type CloudCredentialsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CloudCredentialsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudCredentials is the Schema for the CloudCredentialss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,volterra}
type CloudCredentials struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudCredentialsSpec   `json:"spec"`
	Status            CloudCredentialsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudCredentialsList contains a list of CloudCredentialss
type CloudCredentialsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudCredentials `json:"items"`
}

// Repository type metadata.
var (
	CloudCredentials_Kind             = "CloudCredentials"
	CloudCredentials_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CloudCredentials_Kind}.String()
	CloudCredentials_KindAPIVersion   = CloudCredentials_Kind + "." + CRDGroupVersion.String()
	CloudCredentials_GroupVersionKind = CRDGroupVersion.WithKind(CloudCredentials_Kind)
)

func init() {
	SchemeBuilder.Register(&CloudCredentials{}, &CloudCredentialsList{})
}
