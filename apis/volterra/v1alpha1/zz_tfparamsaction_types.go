/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TFParamsActionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TfOutput *string `json:"tfOutput,omitempty" tf:"tf_output,omitempty"`
}

type TFParamsActionParameters struct {

	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	IgnoreOnUpdate *bool `json:"ignoreOnUpdate,omitempty" tf:"ignore_on_update,omitempty"`

	// +kubebuilder:validation:Required
	SiteKind *string `json:"siteKind" tf:"site_kind,omitempty"`

	// +crossplane:generate:reference:type=github.com/clhain/provider-volterra/apis/volterra/v1alpha1.GCPVPCSite
	// +crossplane:generate:reference:extractor=github.com/clhain/provider-volterra/config/common.ExtractResourceName()
	// +kubebuilder:validation:Optional
	SiteName *string `json:"siteName,omitempty" tf:"site_name,omitempty"`

	// Reference to a GCPVPCSite in volterra to populate siteName.
	// +kubebuilder:validation:Optional
	SiteNameRef *v1.Reference `json:"siteNameRef,omitempty" tf:"-"`

	// Selector for a GCPVPCSite in volterra to populate siteName.
	// +kubebuilder:validation:Optional
	SiteNameSelector *v1.Selector `json:"siteNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	WaitForAction *bool `json:"waitForAction,omitempty" tf:"wait_for_action,omitempty"`
}

// TFParamsActionSpec defines the desired state of TFParamsAction
type TFParamsActionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TFParamsActionParameters `json:"forProvider"`
}

// TFParamsActionStatus defines the observed state of TFParamsAction.
type TFParamsActionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TFParamsActionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TFParamsAction is the Schema for the TFParamsActions API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,volterra}
type TFParamsAction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TFParamsActionSpec   `json:"spec"`
	Status            TFParamsActionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TFParamsActionList contains a list of TFParamsActions
type TFParamsActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TFParamsAction `json:"items"`
}

// Repository type metadata.
var (
	TFParamsAction_Kind             = "TFParamsAction"
	TFParamsAction_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TFParamsAction_Kind}.String()
	TFParamsAction_KindAPIVersion   = TFParamsAction_Kind + "." + CRDGroupVersion.String()
	TFParamsAction_GroupVersionKind = CRDGroupVersion.WithKind(TFParamsAction_Kind)
)

func init() {
	SchemeBuilder.Register(&TFParamsAction{}, &TFParamsActionList{})
}
